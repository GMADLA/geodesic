FROM cloudposse/geodesic:0.132.2 AS geodesic

#
# AWS CLI V2
#
FROM amazonlinux:2 as installer
RUN yum update -y \
  && yum install -y unzip \
  && curl https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscli-exe-linux-x86_64.zip \
  && unzip awscli-exe-linux-x86_64.zip \
  && ./aws/install --bin-dir /aws-cli-bin/

#
# Geodesic base image
#
FROM python:3.8-slim
RUN apt update -y \
&& apt dist-upgrade -y \
&& apt install -y less groff curl

COPY requirements.deb.txt /requirements.txt

RUN python3.8 -m pip install --upgrade pip setuptools wheel && \
    pip install -r /requirements.txt --no-build-isolation --no-warn-script-location

COPY --from=installer /usr/local/aws-cli/ /usr/local/aws-cli/
COPY --from=installer /aws-cli-bin/ /usr/local/bin/

ENV BANNER "geodesic"

ENV MOTD_URL=http://geodesic.sh/motd
ENV HOME=/conf
ENV KOPS_CLUSTER_NAME=example.foo.bar

# Install all packages as root
USER root

# TODO: Install the cloudposse debian repository


# TODO: TLS for debian default repos

# Install debian package manifest
# TODO: Port cache bust to debian
COPY packages.deb.txt /etc/apt/packages.txt
# Install repo checksum in an attempt to ensure updates bust the Docker build cache


RUN apt install -y $(grep -v '^#' /etc/apt/packages.txt) && \
    mkdir -p /etc/bash_completion.d/ /etc/profile.d/ /conf && \
    touch /conf/.gitconfig

# TODO: Work out this bit so we don't have the long list below.
# COPY packages.cp.txt /etc/cp/packages.txt
# COPY --from=geodesic /usr/bin/ /etc/geodesic/
# WORKDIR /etc/geodesic
# RUN cp -R $(grep -v '^#' /etc/cp/packages.txt) /usr/bin/ \
# && ls -l /usr/bin/

COPY --from=geodesic /usr/bin/awless /usr/local/bin
COPY --from=geodesic /usr/bin/aws-iam-authenticator /usr/local/bin
COPY --from=geodesic /usr/bin/aws-vault /usr/local/bin
COPY --from=geodesic /usr/bin/cfssl /usr/local/bin
COPY --from=geodesic /usr/bin/chamber /usr/local/bin
COPY --from=geodesic /usr/bin/fetch /usr/local/bin
COPY --from=geodesic /usr/bin/email /usr/local/bin
COPY --from=geodesic /usr/bin/figurine /usr/local/bin
COPY --from=geodesic /usr/bin/fzf /usr/local/bin
COPY --from=geodesic /usr/bin/github-commenter /usr/local/bin
COPY --from=geodesic /usr/bin/gomplate /usr/local/bin
COPY --from=geodesic /usr/bin/goofys /usr/local/bin
COPY --from=geodesic /usr/bin/gosu /usr/local/bin
COPY --from=geodesic /usr/bin/helm2 /usr/local/bin
COPY --from=geodesic /usr/bin/helm3 /usr/local/bin
COPY --from=geodesic /usr/bin/helmfile /usr/local/bin
COPY --from=geodesic /usr/bin/kops /usr/bin
COPY --from=geodesic /usr/bin/kubectl /usr/local/bin
COPY --from=geodesic /usr/bin/kubectx /usr/local/bin
COPY --from=geodesic /usr/bin/kubens /usr/local/bin
COPY --from=geodesic /usr/bin/pandoc /usr/local/bin
COPY --from=geodesic /usr/bin/rakkess /usr/local/bin
COPY --from=geodesic /usr/bin/rbac-lookup /usr/local/bin
COPY --from=geodesic /usr/bin/retry /usr/local/bin
COPY --from=geodesic /usr/bin/scenery /usr/local/bin
COPY --from=geodesic /usr/bin/shellcheck /usr/local/bin
COPY --from=geodesic /usr/bin/shfmt /usr/local/bin
COPY --from=geodesic /usr/bin/sops /usr/local/bin
COPY --from=geodesic /usr/bin/stern /usr/local/bin
COPY --from=geodesic /usr/bin/teleport /usr/local/bin
COPY --from=geodesic /usr/bin/terraform /usr/local/bin
COPY --from=geodesic /usr/bin/terragrunt /usr/local/bin
COPY --from=geodesic /usr/bin/terrahelp /usr/local/bin
COPY --from=geodesic /usr/bin/tfenv /usr/local/bin
COPY --from=geodesic /usr/bin/tfmask /usr/local/bin
COPY --from=geodesic /usr/bin/variant /usr/local/bin
COPY --from=geodesic /usr/bin/variant2 /usr/local/bin
COPY --from=geodesic /usr/bin/yq /usr/local/bin

# Disable vim from reading a swapfile (incompatible with goofys)
RUN echo 'set noswapfile' >> /etc/vim/vimrc

WORKDIR /tmp

#
# Install Google Cloud SDK
#
# ENV CLOUDSDK_CONFIG=/localhost/.config/gcloud/

# COPY --from=google-cloud-sdk /usr/lib/google-cloud-sdk/ /usr/local/google-cloud-sdk/

# RUN ln -s /usr/local/google-cloud-sdk/completion.bash.inc /etc/bash_completion.d/gcloud.sh && \
#     ln -s /usr/local/google-cloud-sdk/bin/gcloud /usr/local/bin/ && \
#     ln -s /usr/local/google-cloud-sdk/bin/gsutil /usr/local/bin/ && \
#     ln -s /usr/local/google-cloud-sdk/bin/bq /usr/local/bin/ && \
#     gcloud config set core/disable_usage_reporting true --installation && \
#     gcloud config set component_manager/disable_update_check true --installation && \
#     gcloud config set metrics/environment github_docker_image --installation

#
# Configure aws-okta to easily assume roles
#
ENV AWS_OKTA_ENABLED=false

#
# Install kubectl
#
# Set KUBERNETES_VERSION and KOPS_BASE_IMAGE in /conf/kops/kops.envrc
COPY --from=geodesic /etc/bash_completion.d/ /etc/bash_completion.d/

#RUN kubectl completion bash > /etc/bash_completion.d/kubectl.sh
ENV KUBECTX_COMPLETION_VERSION 0.9.0

#
# Install kops
#
ENV KOPS_MANIFEST=/conf/kops/manifest.yaml
ENV KOPS_TEMPLATE=/templates/kops/default.yaml

ENV KOPS_BASTION_PUBLIC_NAME="bastion"

ENV KUBECONFIG=/dev/shm/kubecfg
ENV KUBECONFIG_TEMPLATE=/templates/kops/kubecfg.yaml

# Instance sizes
ENV BASTION_MACHINE_TYPE "t3.small"
ENV MASTER_MACHINE_TYPE "t3.medium"
ENV NODE_MACHINE_TYPE "t3.medium"

# Min/Max number of nodes (aka workers)
ENV NODE_MAX_SIZE 2
ENV NODE_MIN_SIZE 2

#
# Install helm
#
# helm version 2 config
ENV HELM_HOME /var/lib/helm
ENV HELM_VALUES_PATH=${SECRETS_PATH}/helm/values

COPY --from=geodesic ${HELM_HOME} ${HELM_HOME}
RUN helm2 init --client-only
# RUN chmod -R 777 ${HELM_HOME}


# helm version 3 config
ENV HELM_PATH_CACHE /var/cache
ENV HELM_PATH_CONFIG /etc
ENV HELM_PATH_DATA /usr/share
COPY --from=geodesic ${HELM_PATH_CACHE}/helm ${HELM_PATH_CACHE}/helm
COPY --from=geodesic ${HELM_PATH_CONFIG}/helm ${HELM_PATH_CONFIG}/helm
COPY --from=geodesic ${HELM_PATH_DATA}/helm ${HELM_PATH_DATA}/helm

# Enable Atlantis to manage helm 3
RUN chmod -R 777 ${HELM_PATH_CACHE}/helm ${HELM_PATH_CONFIG}/helm ${HELM_PATH_DATA}/helm

#
# Install minimal helm plugins
#
ENV HELM_DIFF_VERSION 3.1.1
ENV HELM_GIT_VERSION 0.7.0
ENV HELM_HELM_2TO3_VERSION 0.5.1

#
# Install fancy Kube PS1 Prompt
#
ENV KUBE_PS1_VERSION 0.7.0
COPY --from=geodesic /etc/profile.d/prompt:kube-ps1.sh /etc/profile.d/prompt:kube-ps1.sh

#
# AWS
#
ENV AWS_DATA_PATH=/localhost/.aws
ENV AWS_CONFIG_FILE=${AWS_DATA_PATH}/config
ENV AWS_SHARED_CREDENTIALS_FILE=${AWS_DATA_PATH}/credentials

#
# Configure aws-vault to easily assume roles (not related to HashiCorp Vault)
#
ENV AWS_VAULT_ENABLED=true
ENV AWS_VAULT_SERVER_ENABLED=false
ENV AWS_VAULT_BACKEND=file
ENV AWS_VAULT_ASSUME_ROLE_TTL=1h
ENV AWS_VAULT_SESSION_TTL=12h
#ENV AWS_VAULT_FILE_PASSPHRASE=

#
# Shell
#
ENV SHELL=/bin/bash
ENV LESS=R
ENV SSH_AGENT_CONFIG=/var/tmp/.ssh-agent

# Set a default terminal to "dumb" (headless) to make `tput` happy
ENV TERM=dumb

# Reduce `make` verbosity
ENV MAKEFLAGS="--no-print-directory"
ENV MAKE_INCLUDES="Makefile Makefile.*"

# This is not a "multi-user" system, so we'll use `/etc` as the global configuration dir
# Read more: <https://wiki.archlinux.org/index.php/XDG_Base_Directory>
ENV XDG_CONFIG_HOME=/etc

# This is a temporary fix related it https://github.com/direnv/direnv/issues/595
# This can be removed on the next release of direnv > 2.21.2
# Note that XDG_CONFIG_DIR is not a variable mentioned in the XDG standard,
# and should not be confused with XDG_CONFIG_DIRS.
ENV XDG_CONFIG_DIR=/etc

# Clean up file modes for scripts
RUN find ${XDG_CONFIG_HOME} -type f -name '*.sh' -exec chmod 755 {} \;

# Install "root" filesystem
COPY rootfs/ /
COPY rootfs-debian/ /

# Install documentation
COPY docs/ /usr/share/docs/

RUN locale-gen en_US.UTF-8

# Build man pages
# RUN /usr/local/bin/docs update

WORKDIR /conf

ENTRYPOINT ["/bin/bash"]
CMD ["-c", "init"]
